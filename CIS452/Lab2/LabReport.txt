CIS 452 Lab 2
Brendan Cronan

1. 	3 Lines are printed by the program
2.	First, the Parent process prints "before fork".  Then, the process forks into a child process that prints out "after fork".  Simultaneously, the child 
	process prints "after fork" and both exit.

3. 	13816 is the pid of the parent function and 13817 is the pid of the child.
	Both are currently sleeping and waiting on the interrupt of sleep being over.
	We know that the second pid is the child function because the process flag is set to 1 which indicates it is a forked process but not exec().

4. 	Diagram included in repository as well as a png capture of the diagram.

5.	It seems that the output is a result of all of the processes sharing a variable i. This results in the skipping around of the printed results showing no
	clear order.  As a result, this program does not run as intended and produces unreliable output.  		
6.	child = wait($status);
7. 	The child prints first because the parent waits for it to complete before printing the pid and exit status.
8. 	The two values printed by the parent function are the pid of the child process and the exit status.  This exit status is just an integer but it has assigned meanings for certain values.
9.	That line will likely never execute because if execvp() fails, the error is caught and the program exits.  
	If the execvp statement executes properly however, the code for that child process changes and the rest of that block will not execute anyways.

10.	The second argument passed to the execvp function is used to pass the arguments provided from the command line.
	This is a vector of strings ending in a NULL string that details the command and any args or flags associated with it.
 		
